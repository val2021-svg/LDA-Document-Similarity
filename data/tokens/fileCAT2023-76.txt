programming
efficiently
instructor
Frederic
Pennerath
Department
campus
DE
METZ
Language
instruction
ANGLAIS
Campus
campus
DE
METZ
Workload
HEE
site
hour
HPE
elective
category
Fundamental
Sciences
advanced
level
Description
Knowing
code
algorithm
effectively
give
programming
language
require
prior
understanding
associate
calculation
model
instruction
language
translate
machine
instruction
student
approach
programming
superficial
risky
way
lack
basic
knowledge
necessary
write
elegant
effective
code
unique
strength
language
allow
production
compile
code
close
optimal
machine
code
offer
different
high
level
programming
approach
strong
typing
object
programming
functional
programming
meta
programming
automatic
code
generation
compilation
reason
essential
disadvantage
richness
continue
grow
recent
version
make
difficult
understand
language
entirety
adequate
training
course
intend
student
include
beginner
want
master
different
aspect
programming
order
able
write
code
combine
performance
elegance
course
adopt
approach
start
mechanism
elementary
program
execution
gradually
move
advanced
language
functionality
objective
transmit
student
real
know
programming
hand
illustrate
concept
relevant
example
hand
devote
significant
hourly
laboratory
work
Quarter
number
develop
optimize
algorithm
language
Prerequisites
term
CS
course
specific
requirement
expect
basic
experience
programming
Syllabus
Total
course
length
lecture
labework
exam
Lectures
Memory
management
variable
life
cycle
struct
smart
pointer
Types
functional
programming
lambda
function
callable
type
exception
Class
inheritance
basic
mechanism
template
generic
programming
base
template
Generic
versus
object
orient
programming
Standard
library
content
concept
system
programming
thread
synchronisation
mechanism
Labworks
tp
memory
manipulation
tp
object
orient
programming
inheritance
tp
functional
programming
tp
generic
programming
tp
standard
library
tp
system
programming
practical
exam
class
component
lecture
lab
etc
course
base
code
example
significant
devote
practical
programming
work
grade
assessment
base
single
examination
schedule
end
course
exam
hour
consist
short
programming
exercise
student
work
computer
access
internet
provide
necessary
documentation
pass
exam
course
material
technical
documentation
modality
remedial
examination
identical
one
initial
examination
course
support
bibliography
Website
provide
teacher
effective
Modern
Scott
Meyers
Professional
Marc
Gredoire
Tour
Bjarne
Stroustrup
Resources
teacher
Hervé
Frezza
Buet
Frédéric
Pennerath
tutorial
practical
work
machine
workstation
student
labwork
group
student
maximum
labwork
carry
Linux
environment
base
exclusively
free
software
cmake
etc
learn
outcome
cover
course
know
write
program
different
programming
paradigm
object
programming
functional
programming
generic
programming
know
certain
aspect
language
decisive
influence
performance
program
execution
know
functionality
offer
recent
specification
language
know
compilation
debugging
environment
Description
skill
acquire
end
course
develop
deep
competence
engineering
field
family
profession
operational
responsible
innovative
digital
world