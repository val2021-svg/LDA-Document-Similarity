   2EL6040 - System programming under linux and   windows       Instructors: Pierre-François Gimenez  Department: CAMPUS DE RENNES  Language of instruction: FRANCAIS  Campus: CAMPUS DE RENNES  Workload (HEE): 60  On-site hours (HPE): 35,00  Elective Category : Fundamental Sciences  Advanced level : Yes      Description     This elective is part of the InfoSec track, but is nonetheless open to any 2nd  year student willing to attend it.  The C language is still one of the most widely used languages to program  low-level  software  applications  in  operating  systems  or  application  layers  closeby. In particular, it is widely used for background services in GNU/Linux  and  Microsoft  Windows  systems  (web  servers,  database  servers,  e-mail  servers, file servers, and so on). Although designed a long time ago (in the  1970s)  this  state  of  things  is  due  to  the  unchallenged  performance  of  C  programs,  thanks  to  the  continuous  progress  of  available  compiler  toolchains.  The  drawbacks  of  writing  in  such  a  concrete  language  are  therefore (partially) balanced by near-optimal performance, at the cost of a  substantial effort for program design.  This  course  is  therefore  oriented  towards  students  willing  to  strengthen  their programming skills through experience with the C language, by writing  applications close to the OS using standard UNIX interfaces (POSIX standard,  I/O management, inter-process communication, multiprocess / multithread  programming, system signal handling, debugging and application design and  implementation)  and  the  Win32/Win64 APIs.  This course will also be the opportunity to realise the intrinsic difficulties of  programming  in  C  (especially  the  explicit  memory  management  and  the  consequences of arguable design decisions in the implementations of arrays  and strings) and the safety and security problems they incur.  We  will  use  this  experience  to  introduce  a  new  programming  language  (Rust),  which  allows  to  guarantee  both  more  security  and  safety  (by  language design, especially thanks to its rich type system) and achieves high  performance just like C programs. To the best of our knowledge, this is the  first  reconciles  security/safety  with  performance  (previous  attempts  always  sacrificed   their  Microsoft  Windows  cousins  with   languages  history   in  programming   language   that   295      either security or performance). The Rust language is already currently used  by Mozilla developers for the web browser Firefox.     Quarter number  SG8     Prerequisites (in terms of CS courses)  Systèmes d'information et programmation, Algorithmique & Complexité,  réalisation préalable d’un projet de développement logiciel (1A)     Syllabus   Part 1 : The C language  Part 2 : The Rust language  Part 3 : System APIs in Unix and Windows, POSIX standard     Class components (lecture, labs, etc.)   50% courses, 50% practical work, mini-project     Grading  Final exam (oral presentation of the project) : 50%  Lab exam : 50%     Course support, bibliography  -  Kernighan and Dennis M. Ritchie.  -  Carol Nichols.  -  -  -  Microsoft Technology) by Johnson M. Hart (2015-10-01).     Resources  A Linux and Windows environment     Learning outcomes covered on the course   Create efficient C and Rust programs on the Linux and Windows platforms.  Select and make use of the OS kernel functions and their APIs.       Description of the skills acquired at the end of the course   C2.1 Thoroughly master a domain or discipline based on the fundamental  sciences or the engineering sciences.  C6.3 Conceive of, design, implement and authenticate complex software.     Programming Rust (August 2016), Jim Blandy.  La norme POSIX.  Windows System Programming, (4th Edition) (Addison-Wesley   Le langage C - 2e édition - Norme ANSI (August 20, 2014) ,  Brian W.   The Rust Programming Language, May 2018, Steve Klabnik and   296   