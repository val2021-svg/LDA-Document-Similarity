2EL1550 - High Performance Computing          Instructors: Stephane Vialle  Department: CAMPUS DE METZ  Language of instruction: FRANCAIS  Campus: CAMPUS DE PARIS - SACLAY  Workload (HEE): 60  On-site hours (HPE): 35,00  Elective Category : Fundamental Sciences  Advanced level : Yes        Description     Students will acquire:         Quarter number  SG6         Prerequisites (in terms of CS courses)    •  Some understanding of stakes and locks of intensive numerical   simulation applied to any research and development issues.   •  Some understanding of parallel algorithmic and experience of each   step of a computing code parallelization.   •  Some knowledge and experience about parallel computing   environments.   •  SG1 common course « Systèmes d'Information et Programmation »   (1CC1000)   •  ST2 common course « Algorithmique et complexité » (1CC2000)  •  Basic knowledge in linear algebra        Syllabus    •  Parallel and distributed architectures: components of a   supercomputer; memory hierarchy; energy aspects; need for fault  tolerance.   111   •  Optimization and parallelization of loops in shared memory:   optimization and vectorization in series, algorithmic and  multithreaded programming with OpenMP, analysis and rewriting  of loops.   •  Distributed algorithms by sending messages: data circulation and   point-to-point communications in MPI (mpi4py): application  deployment and distributed execution in MPI (OpenMPI + mpi4py);  data distribution and collective communications in MPI (mpi4py);  linear algebra, direct methods and iterative methods.   •  Parallel scientific computing: strategies for solving large linear   problems; iterative methods of substructuring; domain  decomposition methods.   •  Performance measurement and analysis: measurement   methodology; speedup and efficiency metrics and limits; scaling  metrics and limits.        Class components (lecture, labs, etc.)    Mathematic approaches and algorithms introduced during the lectures will  be implemented and experimented on computing clusters during the  tutorials, and performance will be measured and analyzed.  Experimentation will be an important part of the course, allowing a deep  understanding of the lecture issues.    •  Composition of the course: lectures 21h00, tutorials on computers   12h00 and final written exam 2h00   •  Possible course schedule:    o  lectures 6 x 1h30 + tutorial (on computing servers) 2 x 1h30 ;  lectures 4 x 1h30 + tutorial (on computing servers) 4 x 1h30 ;  lectures 4 x 1h30 + tutorial (on computing servers) 2 x 1h30   o  final written exam (2h00)   •  Tutorials (close to 36% of the course):    o  tutorials on computing servers will be grouped by 2 (i.e. 3h of   o  the groups of tutorials on machines will be made up by level   experimental tutorial),    of experience in IT,   o  developped codes will run on computing clusters of the Data   Center for Education of CentraleSupélec or the Mésocentre  Moulon (CentraleSupelec-ENS Paris Saclay), available from  computing classrooms, or from student laptops.            112      Grading  Relative weights of the different examinations:    •  50% : Report of some tutorials on computing servers   •  50% : written exam of 1h30 (at the end of the course)  •  In case of a justified absence to one of the tutorials on computing  servers, the grade of this latter is replaced by the grade of the final  examination. In case of unjustified absence a score of 0/20 will be  applied for this tutorial on machines.   •  The remedial exam will consist entirely of a written exam, similar to   the initial exam.        Course support, bibliography   Documents supplied to the students:   •  Frédéric Magoulès, François-Xavier Roux, Guillaume Houzeaux.   Parallel Scientific Computing. Wiley & Sons, Inc., 2015. Hardcover  354 pages (in English).  This course support is available in other  languages: in French (Dunod, 2017), in Spanish (CIMNE, 2014), in  Japanese (Morikita Publishing Co Ltd, 2015), in Hungarian (Pollack  Press, 2018).   •  Numerical Methods: Slides of the lectures  •  Parallel and Distributed Computing: Slides of the lectures.   Others suggested books:    •  W. Gropp, E. Lusk, A. Skjellum. "Using MPI". MIT Press. 1999.  •  R. Chandra, R. Menon, L. Dagum, D. Kohr, D. Maydan, J. McDonald.  "Parallel Programming in OpenMP".  Morgan Kaufmann Publishers.  2000.   •  B. Chapman, G. Jost, R. Van Der Pas.. "Using OpenMP".  MIT Press.   2007.        Resources    •  Teaching staff: Frédéric MAGOULES and Stéphane VIALLE  •  64% of lectures and 36% of tutorials, with tutorial groups of 25   students working on high performance computers.   •  Remote access to different computing servers and clusters (Data   Center for Education of CentraleSupelec, and/or mésocentre  CentraleSupelec-ENS Paris Saclay).   •  Experimentation based on standard Opensource software:   C/C++/Python languages, multithreading library for multicore  machines (OpenMP), message passing library for computing   113      clusters (MPI: MPICH2/OpenMPI), optimized scientific libraries  (OpenBLAS).        Learning outcomes covered on the course   When finishing the course, the students will be able to:    •  [Learning Outcomes 1* (AA1*)] contributing to core skills C1 C2 C6:    o  to tune existing numerical methods for high performance   computing (HPC)   o  to develop innovative numerical methods for high   performance computing (HPC) in order to solve complex  problems    •  [Learning Outcomes 2* (AA2*)] contributing to core skills C1 C2 C6:    o  to design parallel algorithms for intensive simulations,   according to high performance computing requirements   o  to implement parallel algorithms for intensive simulations   on supercomputers or clusters of multi-core PC    o  to manage a limited set of computing resources when   running an intensive simulation   •  [Learning Outcomes 3* (AA3*)] contributing to core skills C1 C2 C6:    o  to implement a complete and consistent high performance   simulation:    ▪  to choose models under both the constraints of   accuracy and scalability,    ▪  to choose efficient parallel implementation   ▪  to achieve a simulation campaign with (always)   strategies   limited ressources        Description of the skills acquired at the end of the course    •  C1: Analyze, design and build complex systems with scientific,   technological, human and economic components   •  C2: Develop an in-depth skills in an engineering field and in a family   of professions   •  C6: Be operational, responsible, and innovative in the digital world   114   